{"abi":[],"bytecode":{"object":"0x6080806040523460175760049081601d823930815050f35b600080fdfe600080fd","sourceMap":"1438:23191:64:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x600080fd","sourceMap":"1438:23191:64:-:0;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/utils/SignatureCheckerLib.sol)Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/SignatureChecker.sol)\",\"details\":\"Note: - The signature checking functions use the ecrecover precompile (0x1). - The `bytes memory signature` variants use the identity precompile (0x4)   to copy memory internally. - Unlike ECDSA signatures, contract signatures are revocable. - As of Solady version 0.0.134, all `bytes signature` variants accept both   regular 65-byte `(r, s, v)` and EIP-2098 `(r, vs)` short form signatures.   See: https://eips.ethereum.org/EIPS/eip-2098   This is for calldata efficiency on smart accounts prevalent on L2s. WARNING! Do NOT use signatures as unique identifiers: - Use a nonce in the digest to prevent replay attacks on the same contract. - Use EIP-712 for the digest to prevent replay attacks across different chains and contracts.   EIP-712 also enables readable signing of typed data for better user safety. This implementation does NOT check if a signature is non-malleable.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Signature verification helper that supports both ECDSA signatures from EOAs and ERC1271 signatures from smart contract wallets like Argent and Gnosis safe.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/solady/src/utils/SignatureCheckerLib.sol\":\"SignatureCheckerLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@openzeppelin/contracts/contracts/=node_modules/@openzeppelin/contracts/\",\":account-abstraction/=node_modules/account-abstraction/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":solady/=node_modules/solady/\"],\"viaIR\":true},\"sources\":{\"node_modules/solady/src/utils/SignatureCheckerLib.sol\":{\"keccak256\":\"0x0eb1575bafc5537fcb4bba519123c694db66840d7a13b7d3b867c55bf95e9c8b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33b81539b6c6901660ab7c134789178146f18622813de5bc984d4c6dad7b13e6\",\"dweb:/ipfs/QmNdG7Y74GbymWqbhMbMY92AHYxLug9sR5gNWfzwB7hM1b\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/","@openzeppelin/contracts/contracts/=node_modules/@openzeppelin/contracts/","account-abstraction/=node_modules/account-abstraction/","ds-test/=node_modules/ds-test/src/","forge-std/=node_modules/forge-std/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/","solady/=node_modules/solady/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"node_modules/solady/src/utils/SignatureCheckerLib.sol":"SignatureCheckerLib"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"node_modules/solady/src/utils/SignatureCheckerLib.sol":{"keccak256":"0x0eb1575bafc5537fcb4bba519123c694db66840d7a13b7d3b867c55bf95e9c8b","urls":["bzz-raw://33b81539b6c6901660ab7c134789178146f18622813de5bc984d4c6dad7b13e6","dweb:/ipfs/QmNdG7Y74GbymWqbhMbMY92AHYxLug9sR5gNWfzwB7hM1b"],"license":"MIT"}},"version":1},"id":64}