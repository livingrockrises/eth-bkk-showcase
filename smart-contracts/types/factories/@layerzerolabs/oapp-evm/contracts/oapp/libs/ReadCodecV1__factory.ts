/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../common";
import type {
  ReadCodecV1,
  ReadCodecV1Interface,
} from "../../../../../../@layerzerolabs/oapp-evm/contracts/oapp/libs/ReadCodecV1";

const _abi = [
  {
    inputs: [],
    name: "InvalidType",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidVersion",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080806040523460175760109081601c823930815050f35b5f80fdfe5f80fdfea164736f6c634300081b000a";

type ReadCodecV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReadCodecV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReadCodecV1__factory extends ContractFactory {
  constructor(...args: ReadCodecV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ReadCodecV1 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ReadCodecV1__factory {
    return super.connect(runner) as ReadCodecV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReadCodecV1Interface {
    return new Interface(_abi) as ReadCodecV1Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): ReadCodecV1 {
    return new Contract(address, _abi, runner) as unknown as ReadCodecV1;
  }
}
